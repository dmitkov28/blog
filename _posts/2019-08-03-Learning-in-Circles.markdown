---
layout: post
title: Learning in Circles
tags: [learning, social science, education]
image:
permalink: /:title
---

>*Learning these days has the lowest barriers in human history. Whether it's YouTube, gamified apps, Ivy League MOOCs or PDF textbooks from fishy Russian websites, there's an ed-tech solution for pretty much every need. With all the information in the world at your fingertips, you should be able to teach yourself stuff without much hassle. Yet one look at your Imma-Learn-Mandarine-over-the-summer past self quickly bursts this bubble of autodidactic utopianism. Modern approaches like gamification have been showing some promise, but there's no amount of points or cool looking badges that could keep you from quitting once you get bored or frustrated or both. It's an annoying problem, but one easily solved by some good ol' heretic behaviorism.*


##### Learning isn't a ladder, it's a circle

Let's first establish an oversimplified, workable model of learning on which to base some of the following speculations. I think the image of concentric circles comes pretty close to what I have in mind. I wouldn't get too caught up with it, though, since the only goal here is to propose an alternative to something I like to call the linear view of learning. It basically means what it says. Virtually every learning process you can imagine is conceptualized as a straight line, where you gradually master more complex skills and internalize the finer nuances of a field. Grades, academic degrees, certification systems are all based upon the assumption that your knowledge and skills at different points in time can be represented as a linear function. This may be true on a macro level, but it produces some serious misconceptions about day-to-day learning activity. Obviously, we tend to get better at the things we do with more practice and thus more time (cheers to you, 10,000-hours crowd), but to me this perspective doesn't really do justice to the learning process. It can also be quite dangerous, since most of us get pretty cocky once we get awarded a certain title (expert, specialist, senior something something) and end up being overconfident even when we are totally wrong (cheers to you, bias hunters). To be honest, I have some doubts as to whether words such as expert even mean something other than 'systematically performs slightly better than chance'. 

<img src="/_images/posts/Concentric_Circles.png"
     alt="Markdown Monster icon"
     style="display: block; margin: 15px auto;" />

I came up with the concentric-circles-analogy when I was trying to understand my own learning process and I slowly rediscovered the ancient Socratic wisdom that the more you learn the more you have left to learn. I found out that even with subjects I felt quite comfortable with, I would learn something more advanced and I would realize how it connects to some basic concept I'd previously thought I'm familiar with and I would start revising even more beginner stuff and make even more connections. The motion is still linear, but there are quite a few full circles along the way. Here's how I'm picturing it: 

We start at the outermost circle, where everything is basic and feels weird and we slowly work our way to the center where the more conceptually tricky stuff takes place. When starting up, everything is fuzzy and hard to understand. This is also the stage where you can and should move the fastest. Unlike the linear view, where you're given tiny chunks of knowledge at a fixed rate, I believe it's especially effective to bombard yourself with as much stuff as you possibly can at first. If you find something particularly difficult to understand, you should just skip it and not worry about it. For a programming language, here's where you'd learn about data types, variables, and basic syntax. For a natural language, this stage is all about boring but necessary building blocks such as prepositions or verb conjugation. But why stop there? Why not look around and see what to expect if you continue learning? For example, it certainly can be scary to look at someone's production code while still a beginner and to have zero idea what's what, but this isn't  about diving deep, it's about exploring the space and kinda getting the bigger picture. Understanding and mastery will happen much later, so there's no need to panic about the sheer volume of stuff you don't know. Think breadth as opposed to depth.    

Moving inwards to the smaller circles, things gets even more difficult, but some of the things you've already encountered just kinda-sorta starts to fit into place. Once you’ve gone through the whole material (study material, that is, there's very little chance that we can even browse through everything there is to know about any given subject) you get a feeling of barely having learned anything, but that is exactly where you want to be at this point.  

The next step is to start over. A lot of the things you couldn't quite understand suddenly start to make sense the second time around. You find yourself able to connect dots you had no idea were even there. In my experience, robust learning results are to be expected somewhere around the fifth or sixth run of this cycle. As we move back and forth between various levels of difficulty and comprehensibility, more and more pieces fall into place and we slowly start to wrap our heads around the stuff. As far as I can tell this can be extremely tedious and downright terrible at times, but it delivers solid results and results are the only thing one should care about when trying to learn (not grades or certificates, but the actual cognitive or physical output you can produce after having learned something new).  

When you're doing it on your own, repeating a process like that requires some serious self-discipline. And therein lies the catch. Without a proper incentive system, most of us would fail miserably and quickly abandon any self-learning endeavors, usually for good. On the other hand, setting up incentive systems comes hand in hand with some annoying upfront costs such as pre-commitment, unpleasant habit changing, time, energy etc. Intrinsically motivated self-learning is supposedly the cooler and more effective kind, but it too requires a more rigid environment. “Do what you’re passionate about, the rest will figure itself out” is often thrown around as a silver bullet for everything, but it’s just lazy advice.  

You can easily drift off when there’s no mechanism in place that forces you to progress (assuming you’re actually up to the task, to begin with, which can be another problem entirely). The solution? Stress. Whenever progress has to be made quickly, introducing higher levels of pressure by establishing some sort of constraint (usually a deadline) isn’t as bad an idea as it sounds. Throw in a social component such as the fear of being judged by your peers if you fail, and your chances of succeeding, or at least trying your best increase tenfold. Think of it as a significantly less badass version of the prison [doctor's 'fear-of-death idea'](https://www.youtube.com/watch?v=KXxw-zXRqOs)  from *The Dark Knight Rises*  

In my oversimplified view of self-directed learning, there are two basic ways of getting it done:  

        1. Plowing through the subject by brute force  
        2. Consciously optimizing the learning environment and nudging yourself into learning  


Strategy number one relies heavily on sheer willpower, which we know is an exhaustible resource, so it’s usually the less effective of the two. However, if the subject is relatively simple, jumping in head-first and quickly absorbing whatever it is to be absorbed could sometimes work. Strategy number two is best suited for complex topics as it requires careful planning and some elementary understanding of behavioral design.


##### Stressing it up

Stress has a well researched and yet still not that well-understood influence on learning. One thing that jumps to mind when looking at the [research literature](https://www.nature.com/articles/npjscilearn201611) is that experiments usually reduce learning to information retention tasks. It’s highly operable but also very far removed from real life. Things get much more interesting when we loosen up the term to include not only memorization but also comprehension and practical application of new concepts (like learning and writing code or having a conversation with native speakers in their mother tongue). If there’s one thing in this entire post I can say with a hundred percent confidence, it’s that passing a language test in German is about a thousand times easier than speaking German with actual Germans. There’s little you can do to turn that into an adequate research proposal, I guess.  

My theory is that successful learning needs some constraints. They make sure you’re put under some low to moderate to very high levels of stress until the desired outcome is achieved (i.e. the deadline is met). You get a fixed amount of time to get something done. In contrast, most self-initiated learning consists of random outbursts of motivation and hyperactivity that eventually either regress to your average levels of effort-putting or fade away completely.  

My battle with [Jekyll](https://jekyllrb.com/) to get this website going can illustrate this point very well. I’ve always had an eye on static site generators, but I never found the time or extra motivation to sit down and play around with one. I have recently decided to give it a go and somehow squeeze it into my weekly routine. While the basic concepts aren’t that complicated, there were a few technicalities that really slowed learning down at times. As a result, I would work on it for an hour, then face some minor setback, get angry at myself, and at Jekyll, and leave it for a while. 

Although the intrinsic motivation was there, small bumps would cause frustration and since there were no other external factors making me do it (no deadlines, no fear of death), except that I thought it would be cool, I would resolve the tension by simply shifting my focus to something easier like reading a book or watching a movie. Eventually, I ended up deploying the site, but it took *way* more time than it should have. In a somewhat technically similar situation from a couple of years ago, I had to optimize an e-mail design for Microsoft Outlook. I was familiar with the general principle, but got rather overwhelmed by the sheer number of nested tables and stone age CSS that go into a project like that. Whenever I’d get particularly confused, I would walk around the office, grab a glass of water from the kitchen and get back to work. I finished a few days earlier and even started enjoying all the small idiosyncracies of the design. I believe the difference as to why two relatively similar tasks took two markedly different paths to completion lies in the deadline and the subjectively perceived consequences of failing and/or succeeding in each particular setting.  

Learning Jekyll was a pet project I doubt I had mentioned to anyone. Cracking MS Outlook's stupid rendering engine was something I was both contractually and socially committed to doing. The e-mail was not particularly urgent, so in my case missing the deadline wouldn’t have had that much of a negative impact on my career, but from my perspective, I would have had incurred tremendous reputational costs. Status awareness is a key driving factor of most human behavior. Not finishing my project in time would have exposed me, even in an insignificant way, as a slacker or simply as incompetent in my field. Admittedly, most people at work have other things to worry about, so my perceived loss of status is strongly exaggerated, but the overall motivation and learning resulting from it would rarely happen in a completely stress-free, sandboxed environment. Accountability produced some mild stress which then produced the state of mind needed to get the results.  

##### Fear and flowing in Las Vegas

[Czikszenmikhaly’s concept of flow](https://en.wikipedia.org/wiki/Flow_(psychology)) offers a neat framework to look at this, but I highly doubt that we do most of what we do in a flow-state. It has more of a prescriptive than a descriptive taste to it. Could the fear of missing a deadline or being embarassed at work be an instinct from [a slightly different historical setting](https://en.wikipedia.org/wiki/Evolutionary_psychology#Environment_of_evolutionary_adaptedness)? Translating the daily existential dread that permeated most of our developmental history into its modern day version, even in such a low-stakes, vanilla-environment, to push ourselves to move forward, seems plausible enough to me. Humanists may hate the idea of using a fear-driven motivation for educational purposes. Thing is, it works.  

To me, the greatest benefit of having gone to school ([apart from the signaling value of my degree](http://blog.press.princeton.edu/2018/01/23/bryan-caplan-on-the-case-against-education/)) is the external stimulus the institution provides to nudge you into actually getting something done. The fear of failing an exam or botching a project, or other people seeing/knowing you failed an exam, or botched a project (ah, there’s that signaling again) is a key ingredient to getting more out of academia than a piece of paper with your name on it. Kahneman and Tversky’s prospect theory is the go-to argument when explaining most forms of loss-aversion and I’d hate to appeal to authority here, but the stuff holds. Sure, learning could potentially have huge advantages (a nice career, a lollipop from your kindergarten teacher) but to you as a learner, that’s a relatively distant and abstract future state of the world that can be easily discounted in favor of some more concrete form of escapism such as Netflix or cookies.  

One of the most likely pitfalls of relying too heavily on a deadline for motivation is the so-called [Parkinson’s Law](https://en.wikipedia.org/wiki/Parkinson%27s_law). Waiting for the last possible moment to start working on a school project is a right of passage for every student. It works most of the time but sometimes it doesn’t. The question is, does it do any good in terms of learning? I don’t think it’s infallible and it certainly needs some finetuning but I do think most of us have some sort of innate time management module that takes care of these things most of the time. And it’s driven by, you guessed it, stress. Whenever a deadline is nearing and you’re considering watching one more episode of Stranger Things instead of being productive, your inner time manager goes *’Nah, I don’t want to fail that class. It’s terrible enough to do it once’* prompting you to turn off the TV and start working towards a [minimum viable solution](https://en.wikipedia.org/wiki/Minimum_viable_product). Buying more time in that scenario is rarely an option so you find yourself facing the 21st-century version of being in a live-or-death-situation. Some sub-optimal results are inevitable, but after going through the motions once or twice you kinda start to adapt.    

##### Nudging thyself

So what would be an effective strategy for self-learning?  

First, devise a scenario where learning is inevitable by taking on some reasonable amount of risk. [Skin in the game](https://en.wikipedia.org/wiki/Skin_in_the_game_(phrase)) is the name of the game. The exact mechanism of how to do this should largely depend on the situation but it usually involves imposing a deadline to a project, publically committing to getting it done, assuming responsibility to a third party. It doesn't really matter what it is as long as not completing the project in time or not completing the project at all, can make you feel embarassed, lose money/status/professional respect, etc. I hope it goes without saying that this doesn't require you putting your career or social life in jeopardy. We can distinguish between no stress, negligible amounts of stress, moderate stress, and holy-crap-is-that-lion-running-in-my-direction stress. The right dosage always depends on skill level and motivation.

Second, try to conceptualize the concentric circles that relate to your particular learning task and run through them like crazy. This is easier said than done. You will need to do a serious amount of research beforehand and it's still only going to scratch the surface most of the time. Add stuff and take stuff out as you go along. It's an adaptive algorithm, not a fixed rule. Forget about quizzes, avoid memorizing, filter your inputs carefully and don't cheap out on your outputs, however imperfect they may be.   
That's basically it. It's not exactly cutting edge psychology, but it can do wonders in the real world.
